<?php

/**
 * Compare the schemas of between databases.
 * 
 * For two database schemas to be considered the same, they must have the same
 * tables, where each table has the same fields, and each field has the same
 * parameters.
 * 
 * Field parameters that are compared are those that are given by the MySQL
 * 'SHOW COLUMNS' command. These are: the field's name, it's type, whether the
 * field can store null values, whether the column is indexed, the default
 * values and whether the field was created with the 'auto_increment' keyword.
 * 
 * More information on this tool can be found at:
 * http://joefreeman.co.uk/blog/2009/07/php-script-to-compare-mysql-database-schemas/
 * 
 * Copyright (C) 2009, Joe Freeman <joe.freeman@bitroot.com>
 * Available under http://en.wikipedia.org/wiki/MIT_License
 * 
 * @package default
 * @author Joe Freeman
 */
class DbDiff {
	
	/**
	 * Export the schema of the database into an array.
	 *
	 * @param string $config Config details for the database connection.
	 * @param string $name Name or description of the database.
	 * @return mixed|string An array structure of the exported schema, or an error string.
	 */
	function export($name) {
		
		$db=  \Nette\Environment::getService("IDatabaseManager")->setDefaultDatabase($name);
		$result = dibi::getDatabaseInfo();
		foreach ($result->tables as $row) {
			$tables[$row->name] = array();
		}
		
		foreach ($tables as $table_name => $fields) {
			
			$result = dibi::query("SHOW COLUMNS FROM " . $table_name);
			foreach ($result as $row) {
				$tables[$table_name][$row['Field']] = (array) $row;
			}
		}
		
		
		$data = array(
			'name' => $name,
			'time' => time(),
			'tables' => $tables
		);
		
		return $data;
	}
	
	/**
	 * Compare two schemas (as generated by the 'export' method.)
	 *
	 * @param string $schema1 The first database schema.
	 * @param string $schema2 The second database schema.
	 * @return void
	 */
	function compare($schema1, $schema2, $ignoreMissing) {
		
		$schema1 = $this->export($schema1);
                $tables1 = array_keys($schema1['tables']);
		$schema2 = $this->export($schema2);
                $tables2 = array_keys($schema2['tables']);

		$tables = array_unique(array_merge($tables1, $tables2));
		
		$results = array();
		foreach ($tables as $table_name) {
			
			// Check tables exist in both databases
			
			if (!isset($schema1['tables'][$table_name])) {
                            if(!$ignoreMissing) {
				$results[$table_name]['missing']=$schema1['name'];
                            }
				continue;
			}

			if (!isset($schema2['tables'][$table_name])) {
                            if(!$ignoreMissing) {
				$results[$table_name]['missing']=$schema2['name'];
                            }
				continue;
			}
			
			
			// Check fields exist in both tables
			
			$fields = array_merge($schema1['tables'][$table_name],
				$schema2['tables'][$table_name]);
			
			foreach ($fields as $field_name => $field) {
				
				if (!isset($schema1['tables'][$table_name][$field_name])) {
					$results[$table_name]['fields'][$field_name]=$schema1['name'];
					
					continue;
				}
				
				if (!isset($schema2['tables'][$table_name][$field_name])) {
					
					$results[$table_name]['fields'][$field_name]=$schema2['name'];
					
					continue;
				}
				
				// Check that the specific parameters of the fields match
				
				$s1_params = $schema1['tables'][$table_name][$field_name];
				$s2_params = $schema2['tables'][$table_name][$field_name];
				
				foreach ($s1_params as $name => $details) {
					if ($s1_params[$name] != $s2_params[$name]) {
                                            $results[$table_name]['diference'][$field_name][$name]=array($schema1['name']=>$s1_params[$name],$schema2['name']=>$s2_params[$name]);
					}
				}
			}
		}
		
		return $results;
	}
}

?>